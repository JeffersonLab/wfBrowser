package org.jlab.wfbrowser.model;

import org.jlab.wfbrowser.business.util.TimeUtil;

import javax.json.*;
import java.time.Instant;
import java.time.ZoneId;

public class Label {
    private final Long id;                  // The database ID associated with this label
    private final Instant labelTime;        // When the label was inserted into the database
    private final String modelName;         // Identifier of the of model that generated the label
    private final String cavityLabel;       // Cavity label generated by the model, i.e., which cavity faulted
    private final String faultLabel;        // Fault type label generated by the model, i.e., what type of fault occurred
    private final Double cavityConfidence;  // Confidence of the cavity label [0,1]
    private final Double faultConfidence;   // Confidence of the fault label [0,1]

    /**
     * This constructor should be used for creating Label objects when we have the database's label ID and timestamp
     * (e.g., when the Label is being returned from the database).
     * @param id The database ID of the Label
     * @param labelTime The time the label was added to the database
     * @param modelName The model that generated the label
     * @param cavityLabel Which cavity faulted
     * @param faultLabel Which fault type occurred
     * @param cavityConfidence The confidence of the cavity label
     * @param faultConfidence The confidence of the fault type label
     */
    public Label(Long id, Instant labelTime, String modelName, String cavityLabel, String faultLabel, Double cavityConfidence, Double faultConfidence) {
        this.id = id;
        this.labelTime = labelTime;
        this.modelName = modelName;
        this.cavityLabel = cavityLabel;
        this.faultLabel = faultLabel;
        this.cavityConfidence = cavityConfidence;
        this.faultConfidence = faultConfidence;
    }

    /**
     * This constructor should be used when the database label ID is not available (e.g., when a Label is bening created
     * for insertion into the database.
     * @param json A JsonObject containing information needed to construct a Label object.  The Label id and timestamp
     *             are assumed to be null.
     */
    public Label(JsonObject json) {
        id = null;
        labelTime = null;
        modelName =  json.getString("model-name");
        cavityLabel = json.getString("cavity-label");
        faultLabel = json.getString("fault-label");

        // Not all models necessarily produce confidence numbers.
        JsonNumber cavConf = json.getJsonNumber("cavity-confidence");
        JsonNumber faultConf = json.getJsonNumber("fault-confidence");
        cavityConfidence = cavConf == null ? null : cavConf.doubleValue();
        faultConfidence = faultConf == null ? null : faultConf.doubleValue();
    }

    public String getModelName() {
        return modelName;
    }

    public String getCavityLabel() {
        return cavityLabel;
    }

    public String getFaultLabel() {
        return faultLabel;
    }

    public Double getCavityConfidence() {
        return cavityConfidence;
    }

    public Double getFaultConfidence() {
        return faultConfidence;
    }

    public JsonObject toJsonObject() {
        JsonObjectBuilder job = Json.createObjectBuilder();

        if (id == null) {
            job.add("id", JsonValue.NULL);
        } else {
            job.add("id", id);
        }
        if (labelTime == null) {
            job.add("label-time_utc", JsonValue.NULL);
        } else {
            job.add("label-time_utc", TimeUtil.getDateTimeString(labelTime));
        }
        job.add("cavity-label", cavityLabel);
        job.add("fault-label", faultLabel);
        job.add("model-name", modelName);
        if (cavityConfidence == null) {
            job.add("cavity-confidence", JsonValue.NULL);
        } else {
            job.add("cavity-confidence", cavityConfidence);
        }
        if (faultConfidence == null) {
            job.add("fault-confidence", JsonValue.NULL);
        } else {
            job.add("fault-confidence", faultConfidence);
        }
        return job.build();
    }
}
